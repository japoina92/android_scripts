#!/bin/bash
# Copyright (C) 2014 Sean Donovan

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#declare variables
if [ "$OTHER_REPO" ]; then
	repofolder=$( echo "$OTHER_REPO_FOLDER" )
	buildfolder=$( echo "$BUILDS/$OTHER_REPO" )
	newzip=$(echo $OTHER_REPO-$(date +%Y%m%d)-SWORDKITCHEN-$SCRIPT_DEVICE.zip)
elif [ "$AUTO_BUILD" ]; then
	repofolder=$( echo "$REPOS/$AUTO_BUILD_FOLDER" )
	buildfolder=$( echo "$BUILDS/$AUTO_BUILD_FOLDER" )
	newzip=$(echo $AUTO_BUILD_FOLDER-$(date +%Y%m%d)-SWORDKITCHEN-$SCRIPT_DEVICE.zip)
else
	repofolder=$( echo "$REPOS/$SCRIPT_REPO-$REPO_PLATFORM" )
	buildfolder=$( echo "$BUILDS/$SCRIPT_REPO-$REPO_PLATFORM" )
	newzip=$(echo $SCRIPT_REPO-$REPO_PLATFORM-$(date +%Y%m%d)-SWORDKITCHEN-$SCRIPT_DEVICE.zip)
fi

outfolder=$(echo "$repofolder/out/target/product/$SCRIPT_DEVICE")

#setup build
rm -f $outfolder/system/build.prop
rm -f $outfolder/*.zip*

cd $repofolder

. build/envsetup.sh

if [ ! $SLOPPYSECONDS ]; then
	$LOCAL/config/romeditor

	if [ $AUTO ]; then
		make clean
	else
		echo $BUILDANDROCLEAN
		read -p "$QUESTIONYESNO" purgeout

		if [ "$purgeout" == "" ]; then
			echo ""
			echo $BUILDANDROCLEANENTER

			make clean
		fi

		if [ $purgeout == $ANSWERYES ] || [ $purgeout == $ANSWERY ]; then
			make clean
		fi
	fi
fi

#setup ccache
if [ $AUTO ]; then
	if ( ! find ~/.ccache &> /dev/null); then
		echo $BUILDANDROCCACHECONTINUEWITHOUT
	else
		echo $BUILDANDROCCACHEFOUND
	fi
else
	if ( ! find ~/.ccache &> /dev/null); then
		echo $BUILDANDROCCACHEDIDNOTDETECT
		echo $BUILDANDROCCACHEOTHER
		read ccacheuse

		if [ $ccacheuse == $ANSWERYES ] || [ $ccacheuse == $ANSWERY ]; then
			echo $BUILDANDROCCACHEHOWBIG
			echo $BUILDANDROCCACHEAMOUNTTYPED
			read ccachesize

			if ( uname -a | grep -q Darwin ); then
				if ( find prebuilts/misc/darwin-x86/ccache/ccache &> /dev/null); then
					prebuilts/misc/darwin-x86/ccache/ccache -M "$ccachesize"G
				elif ( find prebuilt/darwin-x86/ccache/ccache &> /dev/null); then
					prebuilt/darwin-x86/ccache/ccache -M "$ccachesize"G
				else
					echo $BUILDANDROCCACHEREPONOTSUPPORTED
					noccache=true
				fi
			else
				if ( find prebuilts/misc/linux-x86/ccache/ccache &> /dev/null); then
					prebuilts/misc/linux-x86/ccache/ccache -M "$ccachesize"G
				elif ( find prebuilt/linux-x86/ccache/ccache &> /dev/null); then
					prebuilt/linux-x86/ccache/ccache -M "$ccachesize"G
				else
					echo $BUILDANDROCCACHEREPONOTSUPPORTED
					noccache=true
				fi
			fi
		elif [ $ccacheuse == "other" ]; then
			echo $BUILDANDROCCACHEEXACTLOCATION
			read ccachelocation

			if ( ! find $ccachelocation &> /dev/null); then
				echo $BUILDANDROCCACHENOTFOUND
				noccache=true
			else
				export CCACHE_DIR=$( echo "$ccachelocation" )
			fi
		else
			echo $BUILDANDROCCACHECONTINUEWITHOUT
			noccache=true
		fi
	else
		echo $BUILDANDROCCACHEFOUND
	fi
fi

if [ ! "$noccache" ]; then
	export USE_CCACHE=1
fi

#build android

if [ $SCRIPT_REPO == "cm" ]; then
	lunch cm_$SCRIPT_DEVICE-userdebug
	mka bacon recoveryzip recoveryimage checkapi -j $CPU_POWER_TOTAL
elif [ $SCRIPT_REPO == "omni" ]; then
	lunch omni_$SCRIPT_DEVICE-userdebug
	mka bacon -j $CPU_POWER_TOTAL
elif [ $SCRIPT_REPO == "pacman" ]; then
	. ./vendor/pac/tools/colors
	vendor/pac/tools/getdependencies.py $SCRIPT_DEVICE

	rm -f out/target/product/$SCRIPT_DEVICE/obj/KERNEL_OBJ/.version

	lunch pac_$SCRIPT_DEVICE-userdebug
	make -j $CPU_POWER_TOTAL bacon

	vendor/pac/tools/squisher

	rm -f $outfolder/cm-*.*
	rm -f $outfolder/pac_*-ota*.zip
elif [ $SCRIPT_REPO == "paranoid" ]; then
        export PREFS_FROM_SOURCE
	lunch pa_$SCRIPT_DEVICE-userdebug
	mka bacon
else
	if ( cat vendor/*/vendorsetup.sh 2> /dev/null | grep $SCRIPT_DEVICE &> /dev/null ); then
		lunch_device=$( cat $( find vendor/*/vendorsetup.sh | sed "/cm\/vendorsetup.sh/d" | head -n 1 ) \
		| grep $SCRIPT_DEVICE | sed 's/add_lunch_combo //' )
	fi

	if [ ! "$lunch_device" ] && ( find device/*/$SCRIPT_DEVICE/vendorsetup.sh &> /dev/null ); then
		lunch_device=$( cat device/*/$SCRIPT_DEVICE/vendorsetup.sh | grep $SCRIPT_DEVICE | sed 's/add_lunch_combo //' )
	fi

	if [ ! "$lunch_device" ]; then
			echo $BUILDANDROREPONOTSUPPORTED
			read -p "$ENTERTOCONTINUE" done
			exit 0
	fi

	lunch $lunch_device
	make otapackage -j $CPU_POWER_TOTAL
fi

#build aftermath
cd $repofolder/out/target/product/$SCRIPT_DEVICE
if ( find *$SCRIPT_DEVICE.zip 2> /dev/null); then
	zip=$( find *$SCRIPT_DEVICE.zip 2> /dev/null )
else
	zip=$( find *$SCRIPT_DEVICE*.zip 2> /dev/null )
fi

if [ ! "$zip" ]; then
	echo $BUILDANDROBUILDMESSEDUP
	read -p "$BUILDMENURETURN" done
	exit 0
fi

if [ $SCRIPT_REPO == "aosp" ]; then

	echo "$BUILDANDROMAKETEMP1 $zip $BUILDANDROMAKETEMP2"
	mkdir -p $BUILDS/temp/zipout
	cp $zip $BUILDS/temp
	cd $BUILDS/temp/zipout

	echo "$BUILDANDROUNZIP $zip"
	unzip ../$zip > /dev/null

	echo "$BUILDANDRORMSTUFF $zip"
	rm -r recovery
	rm file_contexts

	if [ $SCRIPT_REPO == "aosp" ]; then
		cd system
		echo "$BUILDANDROADDROM1 $zip$BUILDANDROADDROM2"
		echo "ro.rommanager.developerid=$(whoami)" >> build.prop
		echo "ro.modversion=$newzip" >> build.prop

		cd ..
	fi

	cd META-INF/com/google/android
	sed -i "/install-recovery.sh.*/d" updater-script
	cd $BUILDS/temp/zipout
	

	echo "$BUILDANDROZIP $zip"
	zip -r unsignedcrap.zip . > /dev/null

	echo "$BUILDANDROSIGN1 $zip $BUILDANDROSIGN2"
	java -Xmx2048m -jar $repofolder/out/host/linux-x86/framework/signapk.jar -w $repofolder/build/target/product/security/testkey.x509.pem $repofolder/build/target/product/security/testkey.pk8 unsignedcrap.zip $zip
fi

if ( find $buildfolder/*$SCRIPT_DEVICE.zip &> /dev/null); then
	mkdir -p $buildfolder/old

	echo "$BUILDANDROMOVEOLD1 $buildfolder$BUILDANDROMOVEOLD2"

	mv $buildfolder/*$SCRIPT_DEVICE.zip $buildfolder/old
	mv $buildfolder/*$SCRIPT_DEVICE.zip.md5sum $buildfolder/old
fi

mkdir -p $buildfolder

echo "$BUILDANDROCOPY $buildfolder"
echo "$zip -> $newzip"
cat $zip > $buildfolder/$newzip

if [ $SCRIPT_REPO == "aosp" ]; then
	echo "$BUILDANDROCLEANUP"
	cd $BUILDS
	rm -r temp
fi

cd $buildfolder
md5sum $newzip
md5sum $newzip > $newzip.md5sum

echo $COMPLETEDMESSAGE

if [ ! $AUTO ]; then
	read -p "$BUILDMENURETURN" done
fi
