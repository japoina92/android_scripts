#!/bin/bash
# Copyright (C) 2014 Sean Donovan

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if [ ! "$INIT" ]; then

cd $(dirname $0)
. ../utility/retardedbabelfish

usage="$(basename "$0") [-d] [-h] [-p] [-u] $REPOSYNCUSAGE

where:
	-d  $REPOSYNCFLAGD
	-h  $REPOSYNCFLAGH
	-p  $REPOSYNCFLAGP
	-u  $REPOSYNCFLAGU

	    Options list:
	    kitchen = $REPOSYNCUPDATE1
	    aokp = $REPOSYNCUPDATE2
	    aosp43 = $REPOSYNCUPDATE3
	    aosp = $REPOSYNCUPDATE4
	    carbon = $REPOSYNCUPDATE5
	    cm10 = $REPOSYNCUPDATE6
	    cm11 = $REPOSYNCUPDATE7
	    ev = $REPOSYNCUPDATE8
	    omni = $REPOSYNCUPDATE9
	    pacman = $REPOSYNCUPDATE10
	    paranoid = $REPOSYNCUPDATE11
	    all = $REPOSYNCUPDATE12
	    allthethings = $REPOSYNCUPDATE13

	    $REPOSYNCUSAGEEXAMP

	    $REPOSYNCUSAGELIST1
	    $REPOSYNCUSAGELIST2"

	export AUTO=true

while getopts 'd:hp:u:' option; do
	if [ $option == "d" ]; then
		export PLATFORM=$OPTARG
		export DELETEFOLDERANDTHATSIT="true"
	fi

	if [ $option == "h" ]; then
		echo "$usage"
		exit 0
	fi

	if [ $option == "p" ]; then
		export PLATFORM=$OPTARG
		export DELETEFOLDER="true"
	fi

	if [ $option == "u" ]; then
		export PLATFORM=$OPTARG
	fi
done

fi

if [ ! "$INIT" ]; then
	cd $(dirname $0)
	export SCRIPT=$(echo "reposync")
	../headerfile
	exit 0
fi

menu () {

if [ ! "$AUTO" ]; then
	clear

	echo $KITCHENTITLE
	echo $KITCHENUNDERLINE
	echo $REPOSYNCMENUWHAT
	echo $REPOSYNCMENUINIT
	echo "  1. $REPOSYNCMENU1"
	echo "  2. $REPOSYNCMENU2"
	echo "  3. $REPOSYNCMENU3"
	echo "  4. $REPOSYNCMENU4"
	echo "  5. $REPOSYNCMENU5"
	echo "  6. $REPOSYNCMENU6"
	echo "  7. $REPOSYNCMENU7"
	echo "  8. $REPOSYNCMENU8"
	echo "  9. $REPOSYNCMENU9"
	echo "  10. $REPOSYNCMENU10"
	echo "  11. $REPOSYNCMENU11"
	echo "  12. $REPOSYNCMENU12"
	echo "  13. $REPOSYNCMENU13"
	echo "  14. $REPOSYNCMENU14"
	echo "  15. $REPOSYNCMENU15"
	echo "  16. $REPOSYNCMENU16"
	echo "  17. $MENUGOBACK"
	echo ""
	read -p "$KITCHENMENUWHICH" setupanswer

	if [ ! "$setupanswer" ] || ( echo $setupanswer | grep -q [A-Za-z] ) || [ $setupanswer -gt "17" ]; then
		echo ""
		echo $NOTPROPERSELECTION
		read -p "$ENTERTOCONTINUE" done
		menu
	fi
fi

if [ "$PLATFORM" ]; then
	if [ $PLATFORM == "list" ]; then
		echo "kitchen = $REPOSYNCUPDATE1"
		echo "aokp = $REPOSYNCUPDATE2"
		echo "aosp43 = $REPOSYNCUPDATE3"
		echo "aosp = $REPOSYNCUPDATE4"
		echo "carbon = $REPOSYNCUPDATE5"
		echo "cm11 =$REPOSYNCUPDATE6"
		echo "cm = $REPOSYNCUPDATE7"
		echo "evervolv = $REPOSYNCUPDATE8"
		echo "omni = $REPOSYNCUPDATE9"
		echo "pacman = $REPOSYNCUPDATE10"
		echo "paranoid = $REPOSYNCUPDATE11"
		echo "all = $REPOSYNCUPDATE12"
		echo "allthethings = $REPOSYNCUPDATE13"
		exit 0
	fi

	if [ $PLATFORM == "kitchen" ]; then
		setupanswer="3"
	fi

	if [ $PLATFORM == "aokp" ]; then
		setupanswer="4"
	fi

	if [ $PLATFORM == "aosp43" ]; then
		setupanswer="5"
	fi

	if [ $PLATFORM == "aosp" ]; then
		setupanswer="6"
	fi

	if [ $PLATFORM == "carbon" ]; then
		setupanswer="7"
	fi

	if [ $PLATFORM == "cm11" ]; then
		setupanswer="8"
	fi

	if [ $PLATFORM == "cm" ]; then
		setupanswer="9"
	fi

	if [ $PLATFORM == "ev" ] || [ $PLATFORM == "evervolv" ]; then
		setupanswer="10"
	fi

	if [ $PLATFORM == "omni" ]; then
		setupanswer="11"
	fi

	if [ $PLATFORM == "pacman" ]; then
		setupanswer="12"
	fi

	if [ $PLATFORM == "paranoid" ]; then
		setupanswer="13"
	fi

	if [ $PLATFORM == "all" ]; then
		setupanswer="14"
	fi
	if [ $PLATFORM == "allthethings" ]; then
		setupanswer="15"
	fi
fi

setupcheck() {
if [ $SCRIPT_REPO == "kitchen" ]; then
	export REPO_FOLDER=$( echo "$LOCAL/.." )
else
	if [ $otherreposync ]; then
		export REPO_FOLDER=$( echo "$REPOS/otherrepo/$SCRIPT_REPO-$REPO_PLATFORM" )
	else
		export REPO_FOLDER=$( echo "$REPOS/$SCRIPT_REPO-$REPO_PLATFORM" )
	fi
fi

if [ "$DELETEFOLDER" ]; then
	rm -rf $REPO_FOLDER
elif [ "$DELETEFOLDERANDTHATSIT" ]; then
	rm -rf $REPO_FOLDER
	exit 0
fi

initmanifest=""
echo ""

if [ $setupanswer == "14" ] && ( ! find $REPO_FOLDER/.repo -maxdepth 1 &> /dev/null); then
	echo "$repo_name $REPOSYNCNOTINITSKIP"
elif ( find $REPO_FOLDER/.repo -maxdepth 1 &> /dev/null); then
	echo "$REPOSYNCUPDATING $repo_name$REPOSYNCBLAHSMANIFEST"
	initmanifest=true
elif ( ! find $REPO_FOLDER/.repo -maxdepth 1 &> /dev/null); then
	if [ ! "$AUTO" ]; then
		if [ $setupanswer == "15" ]; then
			echo "$repo_name $REPOSYNCNOTINITYET"
			initmanifest=true
		else
			echo "$repo_name $REPOSYNCNOTINITWANTTO"
			read init

			if [ "$init" == "yes" ] || [ "$init" == "y" ]; then
				echo "$REPOSYNCINIT $repo_name"
				initmanifest=true
			else
				echo "$repo_name $REPOSYNCNOTINIT"
			fi
		fi
	else
		if [ ! "$DELETEFOLDER" ]; then
			echo "$repo_name $REPOSYNCNOTINITYET"
		fi

		initmanifest=true
	fi
fi
	setupcode
	synccode

if [ "$done" ]; then
	echo ""
	echo "$repo_name $REPOSYNCCOMPLETE"

	if [ ! "$AUTO" ]; then
		echo ""
		echo $COMPLETEDMESSAGE
		read -p "$ENTERTOCONTINUE" done
		menu
	else
		exit 0
	fi
fi
}

setupcode() {
if [ "$initmanifest" ]; then
	if [ ! $SCRIPT_REPO == "kitchen" ]; then
		mkdir -p $REPO_FOLDER
	fi

	cd $REPO_FOLDER

	repo init -u $repo_url -b $repo_branch -m $manifest_name
fi
}

synccode() {
if ( find $REPO_FOLDER/.repo -maxdepth 1 &> /dev/null); then
	cd $REPO_FOLDER

	preupdate
	echo ""
	echo "$REPOSYNCUPDATING $repo_name $REPOSYNCREPO"
	repo sync -n -j $NETWORKSYNC
	repo sync -l -j $LOCALSYNC

	$LOCAL/config/gitpuller

	postupdate
fi
}

if [ $setupanswer == "1" ]; then
	if ( type -a repo &> /dev/null ); then
		echo ""
		echo $REPOSYNCREPOALREADY
		read -p "$ENTERTOCONTINUE" done
	else
		echo ""
		echo "$REPOSYNCREPOINSTALL"

		if ( ! find ~/bin &> /dev/null ); then
			mkdir ~/bin
		fi

		curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
		chmod a+x ~/bin/repo

		echo ""
		echo $COMPLETEDMESSAGE
		read -p "$ENTERTOCONTINUE" done
	fi
fi

if [ $setupanswer == "2" ]; then
	environmentsetup
fi

if [ $setupanswer == "3" ]; then
	repodefine=$(echo "kitchen")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "4" ]; then
	repodefine=$(echo "aokp")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "5" ]; then
	repodefine=$(echo "aosp43")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "6" ]; then
	repodefine=$(echo "aosp")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "7" ]; then
	repodefine=$(echo "carbon")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "8" ]; then
	repodefine=$(echo "cm11")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "9" ]; then
	repodefine=$(echo "cm")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "10" ]; then
	repodefine=$(echo "evervolv")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "11" ]; then
	repodefine=$(echo "omni")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "12" ]; then
	repodefine=$(echo "pacman")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "13" ]; then
	repodefine=$(echo "paranoid")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "14" ] || [ $setupanswer == "15" ]; then
	repodefine=$(echo "kitchen")
	. repodefiner
	setupcheck

	repodefine=$(echo "aokp")
	. repodefiner
	setupcheck

	repodefine=$(echo "aosp43")
	. repodefiner
	setupcheck

	repodefine=$(echo "aosp")
	. repodefiner
	setupcheck

	repodefine=$(echo "carbon")
	. repodefiner
	setupcheck

	repodefine=$(echo "cm11")
	. repodefiner
	setupcheck

	repodefine=$(echo "cm")
	. repodefiner
	setupcheck

	repodefine=$(echo "evervolv")
	. repodefiner
	setupcheck

	repodefine=$(echo "omni")
	. repodefiner
	setupcheck

	repodefine=$(echo "pacman")
	. repodefiner
	setupcheck

	repodefine=$(echo "paranoid")
	. repodefiner
	done=true
	setupcheck
fi

if [ $setupanswer == "16" ]; then
	clear

	echo $KITCHENTITLE
	echo $KITCHENUNDERLINE
	echo $REPOSYNCADDOR
	echo "  1. $REPOSYNCOTHERMENU1"
	echo "  2. $REPOSYNCOTHERMENU2"
	echo "  3. $MENUGOBACK"
	read otheranswer

	if [ ! "$otheranswer" ] || ( echo $otheranswer | grep -q [A-Za-z] ) || [ $otheranswer -gt "3" ]; then
		echo ""
		echo $NOTPROPERSELECTION
		read -p "$ENTERTOCONTINUE" done
		menu
	fi

	if [ $otheranswer == "1" ]; then
		echo $REPOSYNCOTHERREPONAME
		read manifestname

		echo $REPOSYNCOTHERREPOSHORTNAME
		read manifestshortname

		echo $REPOSYNCOTHERREPOURL
		read manifesturl

		echo $REPOSYNCOTHERREPOBRANCH
		read manifestbranch

		export SCRIPT_REPO=$(echo $manifestshortname)
		export REPO_PLATFORM=$(echo $manifestbranch)
		repo_branch=$(echo $manifestbranch)
		repo_name=$(echo $manifestname)
		repo_url=$(echo $manifesturl)
		done=true
		otherreposync=true
	
		echo $SCRIPT_REPO-$REPO_PLATFORM >> $LOCAL/config/otherrepo
		echo $repo_name >> $LOCAL/config/otherreponame
		
		setupcheck
	fi

	if [ $otheranswer == "2" ]; then
		for otherreposync in `ls $REPOS/otherrepo/* 2> /dev/null`
		do
			cd $otherreposync
			repo sync
		done
	fi

	if [ $otheranswer == "3" ]; then
		echo ""
		read -p "$ENTERTOCONTINUE" done
		menu
	fi
fi

if [ $setupanswer == "17" ]; then
	echo ""
	read -p "$MAINMENURETURN" done
	exit 0
fi

if [ $AUTO ]; then
	exit 0
fi

menu
}
menu
